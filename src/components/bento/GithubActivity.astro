---
interface Props {
  username: string;
  totalContributions?: number;
}

interface ContributionDay {
  contributionCount: number;
  date: string;
}

interface ContributionWeek {
  contributionDays: ContributionDay[];
}

interface GitHubResponse {
  data?: {
    user?: {
      contributionsCollection?: {
        contributionCalendar?: {
          totalContributions: number;
          weeks: ContributionWeek[];
        };
        latestRestrictedContributionDate: string;
      };
    };
  };
  errors?: Array<{ message: string }>;
}

// Contribution color mapping
const CONTRIBUTION_COLORS = {
  NONE: 'bg-[#19222F]',
  // Original colors
  // LOW: 'bg-[#0F4E43]',
  // MEDIUM: 'bg-[#1F977B]',
  // Brighter versions
  LOW: 'bg-[#146E5E]',     // Brighter low
  MEDIUM: 'bg-[#24B694]',  // Brighter medium
  HIGH: 'bg-[#1EF4AE]'
} as const;

const getContributionColor = (count: number): string => {
  if (count === 0) return CONTRIBUTION_COLORS.NONE;
  if (count <= 2) return CONTRIBUTION_COLORS.LOW;
  if (count <= 5) return CONTRIBUTION_COLORS.MEDIUM;
  return CONTRIBUTION_COLORS.HIGH;
};

const { username } = Astro.props;
const GITHUB_TOKEN = import.meta.env.PUBLIC_GITHUB_TOKEN;

if (!GITHUB_TOKEN) {
  throw new Error('PUBLIC_GITHUB_TOKEN environment variable is not set');
}

// GitHub GraphQL API query
const query = `
  query($userName:String!) {
    user(login: $userName) {
      contributionsCollection {
        contributionCalendar {
          totalContributions
          weeks {
            contributionDays {
              contributionCount
              date
            }
          }
        }
        latestRestrictedContributionDate
      }
    }
  }
`;

let totalContributions = 0;
let lastContributionDate: string | null = null;
let contributionWeeks: ContributionWeek[] = [];

try {
  const response = await fetch('https://api.github.com/graphql', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${GITHUB_TOKEN}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ query, variables: { userName: username } })
  });

  if (!response.ok) {
    throw new Error(`GitHub API responded with status ${response.status}`);
  }

  const data = await response.json() as GitHubResponse;
  
  if (data.data?.user) {
    totalContributions = data.data.user.contributionsCollection?.contributionCalendar?.totalContributions || 0;
    contributionWeeks = data.data.user.contributionsCollection?.contributionCalendar?.weeks.slice(-26) || [];
    
    // Find the latest contribution date from the calendar
    const allDays = contributionWeeks.flatMap(week => week.contributionDays);
    const latestDay = allDays
      .filter(day => day.contributionCount > 0)
      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())[0];
    
    lastContributionDate = latestDay?.date || null;
  }
} catch (e) {
  console.error('Failed to fetch GitHub data:', e);
}

const formatDate = (dateString: string) => {
  if (!dateString) return '';
  // Create date in UTC to avoid timezone shifts
  const date = new Date(dateString + 'T00:00:00Z');
  return new Intl.DateTimeFormat('en-US', { 
    weekday: 'long',
    month: 'long',
    day: 'numeric',
    year: 'numeric',
    timeZone: 'UTC'
  }).format(date);
};

// Filter out any future dates
const today = new Date();
today.setHours(23, 59, 59, 999); // Set to end of day in local time

const filteredWeeks = contributionWeeks
  .map(week => ({
    contributionDays: week.contributionDays.filter(day => {
      const contributionDate = new Date(day.date + 'T00:00:00Z');
      return contributionDate <= today;
    })
  }))
  .filter(week => week.contributionDays.length > 0);

// Export for parent component
Astro.props.totalContributions = totalContributions;
---

<div class="flex flex-col gap-6" data-total-contributions={totalContributions}>
  <div id="contribution-wrapper" class="w-full overflow-hidden relative">
    <div id="contribution-slider" class="overflow-x-auto hide-scrollbar cursor-grab select-none">
      <div class="inline-flex gap-0 px-[3px]">
        {filteredWeeks.map((week) => (
          <div class="grid grid-rows-7 gap-0">
            {week.contributionDays.map((day) => (
              <div class="p-[2px]">
                <div 
                  data-date={day.date}
                  data-count={day.contributionCount}
                  class={`w-[18px] h-[18px] rounded-sm transition-colors ${getContributionColor(day.contributionCount)} hover:ring-1 hover:ring-white/20`}
                />
              </div>
            ))}
          </div>
        ))}
      </div>
    </div>
  </div>

  <div class="text-white text-sm">
    {lastContributionDate ? `Last contributed ${formatDate(lastContributionDate)}` : 'No recent contributions'}
  </div>
</div>

<style>
  .hide-scrollbar {
    scrollbar-width: none;
    -ms-overflow-style: none;
  }
  .hide-scrollbar::-webkit-scrollbar {
    display: none;
  }

  .active {
    cursor: grabbing;
  }
</style>

<script>
  const getOrdinalSuffix = (day: number): string => {
    if (day > 3 && day < 21) return 'th';
    switch (day % 10) {
      case 1: return 'st';
      case 2: return 'nd';
      case 3: return 'rd';
      default: return 'th';
    }
  };

  const formatNumber = (num: string | number): string => {
    return Number(num).toLocaleString('en-US');
  };

  const wrapper = document.getElementById('contribution-wrapper');
  const slider = document.getElementById('contribution-slider');
  const contributionInfo = document.querySelector('.contribution-info span');
  
  if (contributionInfo) {
    const count = document.querySelector('[data-total-contributions]')?.getAttribute('data-total-contributions') || '0';
    const defaultText = count === '0' 
      ? 'No contributions in the last year' 
      : `${formatNumber(count)} contributions in the last year`;
    contributionInfo.textContent = defaultText;

    if (wrapper && slider) {
      const setSliderWidth = () => {
        slider.style.width = `${wrapper.offsetWidth - 77}px`;
      };

      setSliderWidth();
      window.addEventListener('resize', setSliderWidth);
      slider.scrollLeft = slider.scrollWidth;

      let isDown = false;
      let startX: number;
      let scrollLeft: number;
      let currentSquare: HTMLElement | null = null;

      const onMouseDown = (e: MouseEvent) => {
        isDown = true;
        slider.classList.add('active');
        startX = e.pageX - slider.offsetLeft;
        scrollLeft = slider.scrollLeft;
      };

      const onMouseLeave = () => {
        isDown = false;
        slider.classList.remove('active');
      };

      const resetContributionInfo = () => {
        if (contributionInfo) {
          contributionInfo.textContent = defaultText;
        }
        currentSquare = null;
      };

      const updateContributionInfo = (target: HTMLElement | null) => {
        if (!target || !contributionInfo) return;
        
        const date = target.dataset.date;
        const count = target.dataset.count;
        
        if (date && count) {
          const utcDate = new Date(date + 'T00:00:00Z');
          const day = utcDate.getUTCDate();
          const suffix = getOrdinalSuffix(day);
          
          const formattedDate = new Intl.DateTimeFormat('en-US', { 
            month: 'long',
            timeZone: 'UTC'
          }).format(utcDate);
          
          const dateWithSuffix = `${formattedDate} ${day}${suffix}`;
          
          contributionInfo.textContent = count === '0' 
            ? `No contributions on ${dateWithSuffix}`
            : `${formatNumber(count)} contribution${count !== '1' ? 's' : ''} on ${dateWithSuffix}`;
        } else {
          contributionInfo.textContent = defaultText;
        }
      };

      slider.addEventListener('mousedown', onMouseDown);
      slider.addEventListener('mouseleave', () => {
        onMouseLeave();
        currentSquare = null;
      });
      slider.addEventListener('mouseup', onMouseLeave);
      slider.addEventListener('mousemove', (e: MouseEvent) => {
        if (!isDown) {
          const target = e.target as HTMLElement;
          const square = target.classList.contains('rounded-sm') ? target : target.querySelector('.rounded-sm');
          
          if (square && square !== currentSquare) {
            currentSquare = square as HTMLElement;
            updateContributionInfo(currentSquare);
          }
        } else {
          e.preventDefault();
          const x = e.pageX - slider.offsetLeft;
          slider.scrollLeft = scrollLeft - (x - startX);
        }
      });

      wrapper.addEventListener('mouseleave', resetContributionInfo);
    }
  }
</script> 