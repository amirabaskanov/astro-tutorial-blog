---
interface Props {
  username: string;
  totalContributions?: number;
}

const { username } = Astro.props;
---

<div class="flex flex-col gap-6" data-username={username}>
  <div id="contribution-wrapper" class="w-full overflow-hidden relative">
    <div id="contribution-slider" class="overflow-x-auto hide-scrollbar cursor-grab select-none">
      <div class="inline-flex gap-0 px-[3px]" id="contribution-grid">
        <!-- Grid will be populated by client-side JavaScript -->
        <div class="loading-placeholder flex items-center justify-center w-full h-[200px] text-white/50">
          Loading contributions...
        </div>
      </div>
    </div>
  </div>

  <div class="text-white text-sm" id="last-contribution-date">
    Loading last contribution date...
  </div>
</div>

<style>
  .hide-scrollbar {
    scrollbar-width: none;
    -ms-overflow-style: none;
  }
  .hide-scrollbar::-webkit-scrollbar {
    display: none;
  }

  .active {
    cursor: grabbing;
  }
</style>

<script>
  interface ContributionDay {
    contributionCount: number;
    date: string;
  }

  interface ContributionWeek {
    contributionDays: ContributionDay[];
  }

  interface GitHubResponse {
    data?: {
      user?: {
        contributionsCollection?: {
          contributionCalendar?: {
            totalContributions: number;
            weeks: ContributionWeek[];
          };
          latestRestrictedContributionDate: string;
        };
      };
    };
    errors?: Array<{ message: string }>;
  }

  const CONTRIBUTION_COLORS = {
    NONE: 'bg-[#19222F]',
    LOW: 'bg-[#146E5E]',
    MEDIUM: 'bg-[#24B694]',
    HIGH: 'bg-[#1EF4AE]'
  } as const;

  const getContributionColor = (count: number): string => {
    if (count === 0) return CONTRIBUTION_COLORS.NONE;
    if (count <= 2) return CONTRIBUTION_COLORS.LOW;
    if (count <= 5) return CONTRIBUTION_COLORS.MEDIUM;
    return CONTRIBUTION_COLORS.HIGH;
  };

  const formatDate = (dateString: string) => {
    if (!dateString) return '';
    const date = new Date(dateString + 'T00:00:00Z');
    return new Intl.DateTimeFormat('en-US', { 
      weekday: 'long',
      month: 'long',
      day: 'numeric',
      year: 'numeric',
      timeZone: 'UTC'
    }).format(date);
  };

  async function fetchGithubData(username: string) {
    const query = `
      query($userName:String!) {
        user(login: $userName) {
          contributionsCollection {
            contributionCalendar {
              totalContributions
              weeks {
                contributionDays {
                  contributionCount
                  date
                }
              }
            }
            latestRestrictedContributionDate
          }
        }
      }
    `;

    try {
      const response = await fetch('https://api.github.com/graphql', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${import.meta.env.PUBLIC_GITHUB_TOKEN}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ query, variables: { userName: username } })
      });

      if (!response.ok) {
        throw new Error(`GitHub API responded with status ${response.status}`);
      }

      const data = await response.json() as GitHubResponse;
      return data;
    } catch (e) {
      console.error('Failed to fetch GitHub data:', e);
      return null;
    }
  }

  function renderContributions(contributionWeeks: ContributionWeek[]) {
    const today = new Date();
    today.setHours(23, 59, 59, 999);

    const filteredWeeks = contributionWeeks
      .slice(-26)
      .map(week => ({
        contributionDays: week.contributionDays.filter(day => {
          const contributionDate = new Date(day.date + 'T00:00:00Z');
          return contributionDate <= today;
        })
      }))
      .filter(week => week.contributionDays.length > 0);

    const gridHtml = filteredWeeks.map(week => `
      <div class="grid grid-rows-7 gap-0">
        ${week.contributionDays.map(day => `
          <div class="p-[2px]">
            <div 
              data-date="${day.date}"
              data-count="${day.contributionCount}"
              class="contribution-square w-[18px] h-[18px] rounded-[5px] transition-colors ${getContributionColor(day.contributionCount)} hover:ring-1 hover:ring-white/20"
            ></div>
          </div>
        `).join('')}
      </div>
    `).join('');

    return gridHtml;
  }

  async function initializeGithubActivity() {
    const container = document.querySelector('[data-username]');
    if (!container) return;

    const username = container.getAttribute('data-username');
    if (!username) return;

    const grid = document.getElementById('contribution-grid');
    const lastContributionElement = document.getElementById('last-contribution-date');
    const contributionInfo = document.querySelector('.contribution-info span');

    try {
      const data = await fetchGithubData(username);
      if (!data?.data?.user?.contributionsCollection?.contributionCalendar) return;

      const { weeks, totalContributions } = data.data.user.contributionsCollection.contributionCalendar;
      
      if (grid) {
        grid.innerHTML = renderContributions(weeks);
      }

      // Find the latest contribution date
      const allDays = weeks.flatMap(week => week.contributionDays);
      const latestDay = allDays
        .filter(day => day.contributionCount > 0)
        .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())[0];

      if (lastContributionElement) {
        lastContributionElement.textContent = latestDay
          ? `Last contributed ${formatDate(latestDay.date)}`
          : 'No recent contributions';
      }

      if (contributionInfo) {
        contributionInfo.textContent = totalContributions === 0
          ? 'No contributions in the last year'
          : `${totalContributions.toLocaleString()} contributions in the last year`;
      }

      // Initialize slider functionality
      initializeSlider();
    } catch (error) {
      console.error('Error initializing GitHub activity:', error);
      if (grid) {
        grid.innerHTML = '<div class="text-white/50">Failed to load contributions</div>';
      }
    }
  }

  function initializeSlider() {
    const slider = document.getElementById('contribution-slider');
    const wrapper = document.getElementById('contribution-wrapper');
    if (!slider || !wrapper) return;

    let isDown = false;
    let startX: number;
    let scrollLeft: number;
    let currentSquare: HTMLElement | null = null;

    const setSliderWidth = () => {
      slider.style.width = `${wrapper.offsetWidth - 77}px`;
    };

    setSliderWidth();
    window.addEventListener('resize', setSliderWidth);
    slider.scrollLeft = slider.scrollWidth;

    slider.addEventListener('mousedown', (e: MouseEvent) => {
      isDown = true;
      slider.classList.add('active');
      startX = e.pageX - slider.offsetLeft;
      scrollLeft = slider.scrollLeft;
    });

    slider.addEventListener('mouseleave', () => {
      isDown = false;
      slider.classList.remove('active');
      currentSquare = null;
    });

    slider.addEventListener('mouseup', () => {
      isDown = false;
      slider.classList.remove('active');
    });

    slider.addEventListener('mousemove', (e: MouseEvent) => {
      if (!isDown) {
        const target = e.target as HTMLElement;
        const square = target.classList.contains('contribution-square') ? target : target.querySelector('.contribution-square');
        
        if (square && square !== currentSquare) {
          currentSquare = square as HTMLElement;
          updateContributionInfo(currentSquare);
        }
      } else {
        e.preventDefault();
        const x = e.pageX - slider.offsetLeft;
        slider.scrollLeft = scrollLeft - (x - startX);
      }
    });
  }

  function updateContributionInfo(target: HTMLElement | null) {
    const contributionInfo = document.querySelector('.contribution-info span');
    if (!target || !contributionInfo) return;
    
    const date = target.dataset.date;
    const count = target.dataset.count;
    
    if (date && count) {
      const utcDate = new Date(date + 'T00:00:00Z');
      const day = utcDate.getUTCDate();
      const suffix = getOrdinalSuffix(day);
      
      const formattedDate = new Intl.DateTimeFormat('en-US', { 
        month: 'long',
        timeZone: 'UTC'
      }).format(utcDate);
      
      const dateWithSuffix = `${formattedDate} ${day}${suffix}`;
      
      contributionInfo.textContent = count === '0' 
        ? `No contributions on ${dateWithSuffix}`
        : `${formatNumber(count)} contribution${count !== '1' ? 's' : ''} on ${dateWithSuffix}`;
    }
  }

  function getOrdinalSuffix(day: number): string {
    if (day > 3 && day < 21) return 'th';
    switch (day % 10) {
      case 1: return 'st';
      case 2: return 'nd';
      case 3: return 'rd';
      default: return 'th';
    }
  }

  function formatNumber(num: string | number): string {
    return Number(num).toLocaleString('en-US');
  }

  // Initialize the component
  initializeGithubActivity();

  // Refresh data periodically (every hour)
  setInterval(initializeGithubActivity, 3600000);
</script> 